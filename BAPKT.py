import numpy as np # для работы с массивами и числовыми вычислениями
import matplotlib.pyplot as plt # для построения графиков
from scipy import integrate # для численного решения дифференциальных уравнений
from scipy import constants # для доступа к физическим константам, таким как g (ускорение свободного падения) и π

# данные Кербина
m0 = 41904
M = m0 + 36482  # масса с топливом
Ft = 3268861.02  # сила тяги двигателя (тк сами рассчитать не смогли, взяли среднее из интернета)
Cf = 0.5  # коэффициент сопротивления воздуха
ro = 1.293  # плотность воздуха
S = constants.pi * ((6.6 / 2) ** 2) # площадь поперечного сечения ракеты
g = 1.00034 * constants.g # ускорение свободного падения в KSP (на Кербине).
k = (M - m0) / (2 * 60 + 48)  # скорость расхода топлива (через 2 мин и 48 сек отсоединилась последняя ступень)



# функция для нахождения тяги двигателя
def A(t):
    return (Ft / (M - k * t))


# коэффициент аэродинамического сопротивления
def B(t):
    return ((Cf * ro * S) / (2 * (M - k * t)))


# дифференциальное уравнение для расчёта изменения скорости ракеты
def dv_dt(t, v):
    return (A(t) - g - B(
        t) * v ** 2)  # для упрощения расчётов мы игнорируем косинус угла, поскольку его изменение пренебрежимо мало


v0 = 0  # начальная скорость ракеты.

t = np.linspace(0, 56, 1000)  # временной интервал от 0 до 56 секунд по 1000 точкам

# решает дифференциальное уравнение (функция изменения скорости, интервал времени условия, начальная скорость, точки в которых вычисляются значения)
solve = integrate.solve_ivp(dv_dt, t_span=(0, max(t)), y0=[v0], t_eval=t)

x = solve.t  # массив времени
y = solve.y[0]  # массив значений скорости

plt.figure(figsize=(7, 6))  # размеры графика в дюймах
plt.plot(x, y, '-r', label="v(t)")  # построение линии
plt.xlabel("Время (с)", fontsize=12)  # Подпись оси X
plt.ylabel("Скорость (м/с)", fontsize=12)  # Подпись оси Y
plt.title("Зависимость скорости от времени (мат. модель)", fontsize=14)  # Подзаголовок графика
plt.legend()  # смысл линии (v(t))
plt.grid(True)  # сетка на графике
plt.show()  # отображение графика в окне
